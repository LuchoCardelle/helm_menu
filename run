#!/bin/bash

# Versión del script
VERSION="1.1.1"

# Definición de colores
ROJO='\033[0;31m'
VERDE='\033[0;32m'
AMARILLO='\033[0;33m'
AZUL='\033[0;34m'
BLANCO='\033[0;37m'
RESET='\033[0m' # Sin color

# Verificar si se ha pasado un argumento para el namespace
if [ -z "$1" ]; then
    echo -e "${ROJO}Error: Debe proporcionar un namespace como argumento.${RESET}"
    echo -e "${BLANCO}Uso: $0 <namespace>${RESET}"
    exit 1
fi

NAMESPACE="$1"

# Verificar si las herramientas necesarias están instaladas
for cmd in kubectl helm jq; do
    if ! command -v $cmd &> /dev/null; then
        echo -e "${ROJO}Error: El comando '$cmd' no está instalado.${RESET}"
        exit 1
    fi
done

# Limpiar la pantalla
clear

# Funciones que imitan los alias, utilizando el namespace como variable
kg() {
    kubectl get pod -o wide --namespace "$NAMESPACE"
}

kt() {
    kubectl get pod -oyaml --namespace "$NAMESPACE"
}

kh() {
    helm list --namespace "$NAMESPACE"
}

ks() {
    kubectl get secret --namespace "$NAMESPACE"
}

kr() {
    echo -e "${AMARILLO}Listado de repositorios de Helm:${RESET}"
    helm repo list
}

kd() {
    while true; do
        echo -e "${AMARILLO}Listado de charts instalados:${RESET}"
        kh
        echo -e "${VERDE}0.${RESET} Salir"
        read -p "Ingrese el nombre completo del chart a desinstalar (o 0 para salir): " chart_name
        echo

        if [ "$chart_name" == "0" ]; then
            echo -e "${VERDE}Saliendo del menú de desinstalación...${RESET}"
            return
        fi

        # Verificar si el chart está instalado
        if ! helm list --namespace "$NAMESPACE" -o json | jq -e --arg name "$chart_name" '.[] | select(.name == $name)' > /dev/null; then
            echo -e "${ROJO}Error: El chart '$chart_name' no está instalado en el namespace '$NAMESPACE'.${RESET}"
            continue
        fi

        echo -e "${AMARILLO}Desinstalando chart '$chart_name' en namespace '$NAMESPACE'...${RESET}"
        helm uninstall "$chart_name" --namespace "$NAMESPACE" || { echo -e "${ROJO}Error al desinstalar el chart.${RESET}"; continue; }
        return
    done
}

kdr() {
    while true; do
        echo -e "${AMARILLO}Listado de repositorios de Helm:${RESET}"
        kr
        echo -e "${VERDE}0.${RESET} Salir"
        read -p "Ingrese el nombre del repositorio a eliminar (o 0 para salir): " repo_name
        echo

        if [ "$repo_name" == "0" ]; then
            echo -e "${VERDE}Saliendo del menú de eliminación de repositorios...${RESET}"
            return
        fi

        # Verificar si el repositorio está listado
        if ! helm repo list -o json | jq -e --arg name "$repo_name" '.[] | select(.name == $name)' > /dev/null; then
            echo -e "${ROJO}Error: El repositorio '$repo_name' no está en la lista de repositorios.${RESET}"
            continue
        fi

        echo -e "${AMARILLO}Eliminando repositorio '$repo_name'...${RESET}"
        helm repo remove "$repo_name" || { echo -e "${ROJO}Error al eliminar el repositorio.${RESET}"; continue; }
        return
    done
}

kra() {
    read -p "Ingrese el nombre para el repositorio local de este chart: " repo_name
    read -p "Ingrese el enlace de GitHub del repositorio (por ejemplo, https://github.com/usuario/repositorio): " github_url
    if [ -z "$repo_name" ] || [ -z "$github_url" ]; then
        echo -e "${ROJO}Error: Debe ingresar tanto el nombre del repositorio como el enlace de GitHub.${RESET}"
        return
    fi
    echo -e "${AMARILLO}Agregando repositorio de Helm '$repo_name' desde '$github_url'...${RESET}"
    helm repo add "$repo_name" "$github_url" || { echo -e "${ROJO}Error al agregar el repositorio.${RESET}"; return; }
    echo -e "${AMARILLO}Actualizando repositorios de Helm...${RESET}"
    helm repo update

    echo -e "${AMARILLO}Buscando charts en el repositorio '$repo_name':${RESET}"
    helm search repo "$repo_name"

    echo -e "${AMARILLO}Copie y pegue el nombre del chart tal como aparece en la columna 'NAME' del resultado de la búsqueda.${RESET}"
    read -p "Ingrese el nombre del chart a instalar: " chart_name
    if [ -z "$chart_name" ]; then
        echo -e "${ROJO}Error: No se ingresó ningún nombre de chart.${RESET}"
        return
    fi

    echo -e "${AMARILLO}Ingrese un nombre para la instalación del chart (puede ser cualquier nombre que elija):${RESET}"
    read -p "Nombre para la instalación: " install_name
    if [ -z "$install_name" ]; then
        echo -e "${ROJO}Error: No se ingresó ningún nombre para la instalación.${RESET}"
        return
    fi

    echo -e "${AMARILLO}Ingrese el nodo para la afinidad del chart (por ejemplo, 'nodo03') o presione Enter para continuar sin definir el nodo de afinidad:${RESET}"
    read -p "Nodo de afinidad: " node_affinity_node

    echo -e "${AMARILLO}Ingrese la cantidad de réplicas que se desplegarán o presione Enter para usar el valor predeterminado '1':${RESET}"
    read -p "Cantidad de réplicas: " replicas
    replicas="${replicas:-1}"  # Valor por defecto
    if ! [[ "$replicas" =~ ^[0-9]+$ ]]; then
        echo -e "${ROJO}Error: Debe ingresar un número válido de réplicas.${RESET}"
        return
    fi

    # Confirmar el comando a ejecutar
    echo -e "${AMARILLO}El siguiente comando se ejecutará:${RESET}"
    if [ -n "$node_affinity_node" ]; then
        echo -e "${VERDE}helm install ${install_name} ${chart_name} --namespace ${NAMESPACE} --set nodeAffinity.node=${node_affinity_node},replicaCount=${replicas}${RESET}"
    else
        echo -e "${VERDE}helm install ${install_name} ${chart_name} --namespace ${NAMESPACE} --set replicaCount=${replicas}${RESET}"
    fi
    read -n 1 -p "¿Desea continuar con la instalación? (y/n): " confirm
    echo

    if [ "$confirm" != "y" ]; then
        echo -e "${VERDE}Operación cancelada.${RESET}"
        return
    fi

    echo -e "${AMARILLO}Instalando chart '$chart_name' como '$install_name' en namespace '$NAMESPACE'${RESET}"
    if [ -n "$node_affinity_node" ]; then
        helm install "$install_name" "$chart_name" --namespace "$NAMESPACE" --set nodeAffinity.node="$node_affinity_node",replicaCount="$replicas" || { echo -e "${ROJO}Error al instalar el chart.${RESET}"; }
    else
        helm install "$install_name" "$chart_name" --namespace "$NAMESPACE" --set replicaCount="$replicas" || { echo -e "${ROJO}Error al instalar el chart.${RESET}"; }
    fi
}

# Nueva función para la opción 'a'
verificar_resource_requests() {
    echo -e "${AMARILLO}Listado de repositorios locales:${RESET}"
    helm repo list

    echo -e "${AMARILLO}Ingrese el nombre del repositorio local para buscar los charts:${RESET}"
    read -p "Nombre del repositorio: " repo_name
    if [ -z "$repo_name" ]; then
        echo -e "${ROJO}Error: Debe ingresar un nombre de repositorio.${RESET}"
        return
    fi

    # Verificar si el repositorio está listado
    if ! helm repo list -o json | jq -e --arg name "$repo_name" '.[] | select(.name == $name)' > /dev/null; then
        echo -e "${ROJO}Error: El repositorio '$repo_name' no está en la lista de repositorios.${RESET}"
        return
    fi

    echo -e "${AMARILLO}Buscando charts en el repositorio '$repo_name':${RESET}"
    helm search repo "$repo_name"

    echo -e "${AMARILLO}Ingrese el nombre del chart para verificar los 'ResourceRequests':${RESET}"
    read -p "Nombre del chart: " chart_name
    if [ -z "$chart_name" ]; then
        echo -e "${ROJO}Error: No se ingresó ningún nombre de chart.${RESET}"
        return
    fi

    echo -e "${AMARILLO}Verificando 'ResourceRequests' para el chart '$chart_name'...${RESET}"
    helm ResourceRequests "$chart_name" || { echo -e "${ROJO}Error al verificar 'ResourceRequests'.${RESET}"; }
}

# Función para mostrar el menú con colores
mostrar_menu() {
    echo -e "${AZUL}Seleccione una opción (Versión $VERSION):${RESET}"
    echo -e "${VERDE}1.${RESET} Agregar un Helm repo desde un enlace de GitHub | listar sus charts | desplegar el chart"
    echo -e "${VERDE}2.${RESET} Listar pods en namespace '$NAMESPACE' (equivalente a 'kg')"
    echo -e "${VERDE}3.${RESET} Listar secretos en namespace '$NAMESPACE' (equivalente a 'ks')"
    echo -e "${VERDE}4.${RESET} Listar charts instalados en namespace '$NAMESPACE' (equivalente a 'kh')"
    echo -e "${VERDE}5.${RESET} Listar repositorios de Helm (equivalente a 'kr')"
    echo -e "${VERDE}6.${RESET} Mostrar pods en formato YAML en namespace '$NAMESPACE' (equivalente a 'kt')"
    echo -e "${VERDE}7.${RESET} Desinstalar un chart en namespace '$NAMESPACE' (equivalente a 'kd')"
    echo -e "${VERDE}8.${RESET} Eliminar un repositorio de Helm"
    echo -e "${VERDE}a.${RESET} Verificar 'ResourceRequests' del chart antes de instalarlo"
    echo -e "${VERDE}0.${RESET} Salir"
}

# Función para mostrar el submenú de la opción 1
sub_menu_opcion_1() {
    while true; do
        echo -e "${AMARILLO}Seleccione una subopción para 'Agregar un Helm repo':${RESET}"
        echo -e "${VERDE}0.${RESET} Volver al menú principal"
        echo -e "${VERDE}1.${RESET} Agregar repositorio y desplegar chart"
        read -p "Seleccione una subopción: " subopcion
        echo

        case $subopcion in
            0)
                return
                ;;
            1)
                kra
                ;;
            *)
                echo -e "${ROJO}Opción inválida. Por favor, seleccione 0 o 1.${RESET}"
                ;;
        esac
    done
}

# Función para manejar la opción seleccionada
manejar_opcion() {
    case $1 in
        1)
            sub_menu_opcion_1
            ;;
        2)
            echo -e "${AMARILLO}Ejecutando: kg${RESET}"
            kg
            ;;
        3)
            echo -e "${AMARILLO}Ejecutando: ks${RESET}"
            ks
            ;;
        4)
            echo -e "${AMARILLO}Ejecutando: kh${RESET}"
            kh
            ;;
        5)
            echo -e "${AMARILLO}Ejecutando: kr${RESET}"
            kr
            ;;
        6)
            echo -e "${AMARILLO}Ejecutando: kt${RESET}"
            kt
            ;;
        7)
            echo -e "${AMARILLO}Ejecutando: kd${RESET}"
            kd
            ;;
        8)
            echo -e "${AMARILLO}Ejecutando: kdr${RESET}"
            kdr
            ;;
        a)
            echo -e "${AMARILLO}Ejecutando: verificar_resource_requests${RESET}"
            verificar_resource_requests
            ;;
        0)
            echo -e "${VERDE}Saliendo...${RESET}"
            exit 0
            ;;
        *)
            echo -e "${ROJO}Opción inválida. Por favor, seleccione una opción del 0 al 8 o 'a'.${RESET}"
            ;;
    esac
}

# Bucle principal del script
while true; do
    mostrar_menu
    read -p "Seleccione una opción: " opcion
    echo
    manejar_opcion "$opcion"
done

