#!/bin/bash

# Colores para la interfaz
NC='\033[0m' # Sin color
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'

# Verificar si las herramientas necesarias están instaladas
check_tools() {
    for tool in git helm kubectl curl; do
        if ! command -v $tool &> /dev/null; then
            echo -e "${RED}Error: $tool no está instalado. Por favor instálalo y vuelve a intentarlo.${NC}"
            exit 1
        fi
    done
}

# Listar namespaces
list_namespaces() {
    clear
    kubectl get namespaces --no-headers -o custom-columns=":metadata.name"
    echo
}

# Validar el namespace seleccionado
validate_namespace() {
    local namespace=$1
    kubectl get namespace $namespace &> /dev/null
    if [ $? -ne 0 ]; then
        echo -e "${RED}El namespace '$namespace' no existe. Por favor selecciona uno válido.${NC}"
        exit 1
    fi
}

# Opción 1: Clonar repositorios
clone_repos() {
    echo -e "${BLUE}Clonando repositorios...${NC}"
    git clone https://github.com/LuchoCardelle/helm_ValidaPassword/ WhiteStack/Plugin/ValidaPassword
    git clone https://github.com/LuchoCardelle/helm_ResourceRequests.git WhiteStack/Plugin/ResourceRequests
    git clone https://github.com/LuchoCardelle/helm_SecretCreator/ WhiteStack/Plugin/SecretCreator
    echo -e "${GREEN}Repositorios clonados exitosamente.${NC}"

    echo -e "${BLUE}Instalando plugins en Helm...${NC}"
    helm plugin install WhiteStack/Plugin/ValidaPassword
    helm plugin install WhiteStack/Plugin/ResourceRequests
    helm plugin install WhiteStack/Plugin/SecretCreator
    echo -e "${GREEN}Plugins instalados exitosamente.${NC}"
    echo

}

# Opción 2: Desplegar un chart desde un repo remoto
deploy_chart() {
    read -p "Introduce el link del repositorio GitHub: " repo_url
    read -p "Introduce el nombre para diferenciarlo localmente: " repo_name

    echo -e "${BLUE}Añadiendo el repositorio Helm...${NC}"
    helm repo add $repo_name $repo_url
    helm repo update

    echo -e "${YELLOW}Repositorios Helm disponibles:${NC}"
    helm repo list
    echo

    echo -e "${YELLOW}Charts disponibles en los repositorios:${NC}"
    helm search repo
    echo

    read -p "Introduce el nombre del chart que deseas instalar (incluye el nombre del repositorio, ej. repo/chart): " chart_name
    read -p "Introduce el nombre para esta instalación: " install_name
    read -p "¿Vas a usar la función 'nodoAffinity'? (si/no): " use_affinity

    if [ "$use_affinity" == "si" ]; then
        echo -e "${YELLOW}Nodos disponibles:${NC}"
        kubectl get nodes -o custom-columns=NAME:.metadata.name
        read -p "Introduce el nombre del nodo elegido: " node_name
        affinity_option="--set nodeAffinity.node=$node_name"
    else
        affinity_option=""
    fi

    read -p "Introduce la cantidad de replicas a desplegar: " replicas
    install_command="helm install $install_name $chart_name --set replicaCount=$replicas $affinity_option --namespace $namespace"
    echo -e "${CYAN}El comando a ejecutar es:${NC} ${WHITE}$install_command${NC}"
    echo -e "${BLUE}Ejecutando el comando...${NC}"
    eval $install_command
    echo
}

# Opción 3: Instalar con validación de información sensible
install_and_validate() {
    read -p "Introduce el link del repositorio GitHub para el plugin de validación: " repo_url
    read -p "Introduce el nombre para diferenciarlo localmente: " repo_name

    echo -e "${BLUE}Añadiendo el repositorio Helm para validación...${NC}"
    helm repo add $repo_name $repo_url
    helm repo update

    echo -e "${YELLOW}Repositorios Helm disponibles:${NC}"
    helm repo list
    echo

    echo -e "${YELLOW}Charts disponibles en los repositorios:${NC}"
    helm search repo
    echo

    read -p "Introduce el nombre del chart que deseas instalar (incluye el nombre del repositorio, ej. repo/chart): " chart_name
    read -p "Introduce el nombre para esta instalación: " install_name

    read -p "¿Vas a usar la función 'ValidPassword'? (si/no): " use_ValidPassword
    if [ "$use_ValidPassword" == "si" ]; then
        echo -e "${YELLOW}Validando información sensible en el values.yaml...${NC}"
        # Ejecutar validación con el plugin 'ValidaPassword'
        echo -e "${BLUE}Ejecutando validación con el plugin 'ValidaPassword'...${NC}"
        helm ValidaPassword $install_name --namespace $namespace
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: La validación con el plugin 'ValidaPassword' falló. La instalación ha sido cancelada.${NC}"
            echo -e "${CYAN}Volviendo al menú principal...${NC}"
	    main_menu
            #return
        fi
    else
        echo "Continúa la instalación del chart"
    fi

    read -p "¿Vas a usar la función 'nodoAffinity'? (si/no): " use_affinity

    if [ "$use_affinity" == "si" ]; then
        echo -e "${YELLOW}Nodos disponibles:${NC}"
        kubectl get nodes -o custom-columns=NAME:.metadata.name
        read -p "Introduce el nombre del nodo elegido: " node_name
        affinity_option="--set nodeAffinity.node=$node_name"
    else
        affinity_option=""
    fi

    read -p "Introduce la cantidad de replicas a desplegar: " replicas
    install_command="helm install $install_name $chart_name --set replicaCount=$replicas $affinity_option --namespace $namespace"
    echo -e "${CYAN}El comando a ejecutar es:${NC} ${WHITE}$install_command${NC}"
    echo -e "${BLUE}Ejecutando el comando...${NC}"
    eval $install_command

    echo
}

# Opción 4: Listar y comprobar
list_and_check() {
    while true; do
        echo -e "${CYAN}Selecciona una opción:${NC}"
        echo -e "A. Listar pods de un namespace"
        echo -e "B. Listar pods en formato YAML en un namespace"
        echo -e "C. Listar secretos de un namespace"
        echo -e "D. Listar charts instalados de un namespace"
        echo -e "E. Listar repositorios de Helm"
        echo -e "0. Volver al menú principal"
        echo
        read -p "Introduce tu opción (A/B/C/D/E/0): " option

        case $option in
            A)
                echo -e "${YELLOW}Listando pods en el namespace $namespace:${NC}"
                kubectl get pods -o wide -n $namespace
                ;;
            B)
                echo -e "${YELLOW}Listando pods en formato YAML en el namespace $namespace:${NC}"
                kubectl get pods -n $namespace -o yaml
                ;;
            C)
                echo -e "${YELLOW}Listando secretos en el namespace $namespace:${NC}"
                kubectl get secrets -n $namespace
                ;;
            D)
                echo -e "${YELLOW}Listando charts instalados en el namespace $namespace:${NC}"
                helm list -n $namespace
                ;;
            E)
                echo -e "${YELLOW}Listando repositorios de Helm:${NC}"
                helm repo list
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}Opción inválida.${NC}"
                ;;
        esac
        echo
    done
}

# Opción 5: Limpieza / Eliminar
cleanup_and_remove() {
    while true; do
        echo -e "${CYAN}Selecciona una opción:${NC}"
        echo -e "A. Desinstalar un chart en namespace"
        echo -e "B. Eliminar un repositorio de Helm"
        echo -e "C. Eliminar un secret"
        echo -e "0. Volver al menú principal"
        echo
        read -p "Introduce tu opción (A/B/C/0): " option

        case $option in
            A)
                while true; do
                    echo -e "${YELLOW}Charts instalados en el namespace $namespace:${NC}"
                    helm list -n $namespace
                    echo
                    read -p "Introduce el nombre del chart a desinstalar (o '0' para volver): " chart_to_delete
                    if [ "$chart_to_delete" == "0" ];then
                        break
                    fi
                    echo -e "${BLUE}Desinstalando el chart $chart_to_delete...${NC}"
                    helm uninstall $chart_to_delete -n $namespace
                    echo
                done
                ;;
            B)
                while true; do
                    echo -e "${YELLOW}Repositorios Helm disponibles:${NC}"
                    helm repo list
                    echo
                    read -p "Introduce el nombre del repositorio a eliminar (o '0' para volver): " repo_to_delete
                    if [ "$repo_to_delete" == "0" ];then
                        break
                    fi
                    echo -e "${BLUE}Eliminando el repositorio $repo_to_delete...${NC}"
                    helm repo remove $repo_to_delete
                    echo
                done
                ;;
            C)
                while true; do
                    echo -e "${YELLOW}Secrets disponibles en el namespace $namespace:${NC}"
                    kubectl get secrets -n $namespace
                    echo
                    read -p "Introduce el nombre del secret a eliminar (o '0' para volver): " secret_to_delete
                    if [ "$secret_to_delete" == "0" ];then
                        break
                    fi
                    echo -e "${BLUE}Eliminando el secret $secret_to_delete...${NC}"
                    kubectl delete secret $secret_to_delete -n $namespace
                    echo
                done
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}Opción inválida.${NC}"
                ;;
        esac
    done
}

# Opción 6: Utilización de Plugins
manage_plugins() {
    while true; do
        echo -e "${CYAN}Selecciona una opción:${NC}"
        echo -e "A. Listar plugins disponibles"
        echo -e "B. Ejecutar un plugin sobre un local chart"
        echo -e "C. Mostrar ayuda de un plugin"
        echo -e "0. Volver al menú principal"
        echo
        read -p "Introduce tu opción (A/B/C/0): " option

        case $option in
            A)
                echo -e "${YELLOW}Listando plugins disponibles:${NC}"
                helm plugin list
                ;;
            B)
                echo -e "${YELLOW}Lista de plugins disponibles:${NC}"
                helm plugin list
                echo
                echo -e "${YELLOW}Lista de charts disponibles:${NC}"
                helm search repo
                echo
                read -p "Introduce el nombre del plugin a ejecutar (o '0' para volver): " plugin_name
                if [ "$plugin_name" == "0" ]; then
                    break
                fi
                read -p "Introduce el nombre del chart (si aplica, o deja en blanco): " chart_name
                
                if [ -z "$chart_name" ]; then
                    execute_command="helm $plugin_name"
                else
                    execute_command="helm $plugin_name $chart_name"
                fi
                
                echo -e "${CYAN}El comando a ejecutar es:${NC} ${WHITE}$execute_command${NC}"
                echo -e "${BLUE}Ejecutando el comando...${NC}"
                eval $execute_command
                echo
                ;;
            C)
                echo -e "${YELLOW}Lista de plugins disponibles:${NC}"
                helm plugin list
                echo
                read -p "Introduce el nombre del plugin para mostrar la ayuda (o '0' para volver): " plugin_name
                if [ "$plugin_name" == "0" ]; then
                    break
                fi
                echo -e "${BLUE}Mostrando ayuda para el plugin $plugin_name...${NC}"
                helm help $plugin_name
                echo
                ;;
            0)
                return
                ;;
            *)
                echo -e "${RED}Opción inválida.${NC}"
                ;;
        esac
    done
}


# Opción 7: Mostrar leyenda
add_repo() {
    read -p "Introduce el link del repositorio GitHub: (o '0' para volver)" repo_url
     if [ "$repo_url" == "0" ]; then
	main_menu
     fi

    read -p "Introduce el nombre para diferenciarlo localmente: " repo_name

    echo -e "${BLUE}Añadiendo el repositorio Helm...${NC}"
    helm repo add $repo_name $repo_url
    helm repo update

    echo -e "${YELLOW}Repositorios Helm disponibles:${NC}"
    helm repo list
    echo
}

# Menú principal
main_menu() {
    while true; do
        echo -e "${CYAN}Selecciona una opción:${NC}"
        echo -e "1. Instalar plugins [ ResourceRequests | SecretCreator | ValidaPassword ]"
        echo -e "2. Instalar [ repo | chart | affinityNode | replicas | con secret ]"
        echo -e "3. Instalar [ repo | chart | affinityNode | replicas | plugin valida info sensible del values ]"
        echo -e "4. Listar y comprobar"
        echo -e "5. Limpieza / Eliminar"
        echo -e "6. Utilización de Plugins"
        echo -e "7. Tan solo agrega un nuevo repo, por si queres usar los plugins"
        echo -e "0. Salir"
        echo
        read -p "Introduce tu opción (1/2/3/4/5/6/7/0): " option

        case $option in
            1)
                clone_repos
                ;;
            2)
                deploy_chart
                ;;
            3)
                install_and_validate
                # Funciones duplicadas de la opción 2
                deploy_chart
                ;;
            4)
                list_and_check
                ;;
            5)
                cleanup_and_remove
                ;;
            6)
                manage_plugins
                ;;
            7)
                add_repo
                ;;
            0)
                echo -e "${GREEN}Saliendo...${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Opción inválida.${NC}"
                ;;
        esac
    done
}

# Inicio del script
check_tools
echo -e "${YELLOW}Namespaces disponibles:${NC}"
list_namespaces
read -p "Introduce el namespace donde deseas operar: " namespace
validate_namespace $namespace

main_menu
